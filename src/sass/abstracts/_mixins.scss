@use "../_sg78/sg78_variables" as sg78;
@use "../abstracts/functions";

/**************************************************************************
 * UTILS *
 ***************************************************************************/
@mixin bemAnchor($be, $m: "") {
	@if ($be != "") {
		$className: #{$be} + "__anchor";
		@if ($m != "") {
			$className: $className + "--" + #{$m};
		}
		.#{$className} a[href],
		a[href].#{$className} {
			@content;
		}
	}
}

/* Set Display to Flexbox with browser compatible styles. */
@mixin flexbox() {
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
}
@mixin flex($values) {
	-webkit-box-flex: $values;
	-moz-box-flex: $values;
	-webkit-flex: $values;
	-ms-flex: $values;
	flex: $values;
}
@mixin order($val) {
	-webkit-box-ordinal-group: $val;
	-moz-box-ordinal-group: $val;
	-ms-flex-order: $val;
	-webkit-order: $val;
	order: $val;
}

/* Set Fluid Font Size */
@mixin fontSizeFluid($rem, $minFontSize, $maxFontSize, $minWidth, $maxWidth) {
	/* See: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/ */
	$minWidth: calc($minWidth / $rem);
	$maxWidth: calc($maxWidth / $rem);
	$_slope: calc(($maxFontSize - $minFontSize) / ($maxWidth - $minWidth));
	$_yAxisIntersection: -($minWidth) * $_slope + $minFontSize;

	font-size: clamp(
		#{$minFontSize}rem,
		#{$_yAxisIntersection}rem + #{($_slope * 100)}vw,
		#{$maxFontSize}rem
	);
}

/* Set hover and focus styles at the same time.*/
@mixin hover($targets...) {
	&:not([disabled]) {
		&:hover,
		&:focus {
			@content;
			cursor: pointer;
		}
		/*&:focus {
			outline: none;
		}*/

		@if (length($targets) > 0) {
			@each $target in $targets {
				&.#{$target} {
					@content;
					cursor: pointer;
				}
			}
		}
	}
}

@mixin autoFlowGrid($type:column, $length, $element: null) {
	@if $element {
		@for $i from 1 through $length {
			#{$element}:nth-child(#{$length}n + #{$i}) {
				grid-#{$type}: $i;
			}
		}
	} @else {
		@for $i from 1 through $length {
			> *:nth-child(#{$length}n + #{$i}) {
				grid-#{$type}: $i;
			}
		}
	}
}
@mixin autoFlowGridBasedOnLayout($type: column, $layoutElement: "", $even: true, $maxLayouts: 6, $length: 10) {
	$typeOption: cols;
	@if ($type == row) {
		$typeOption: rows;
	}

	@for $idxLayout from 1 to $maxLayouts + 1 {
		#{$layoutElement}[sg78-layout-option="#{$idxLayout}"] {
			@for $idx from 1 to $length + 1 {
				[sg78-layout-option-#{$idxLayout}-#{$typeOption}="#{$idx}"] {
					display: grid;
					@if ($even) {
						grid-template-#{$type}s: repeat($idx, 1fr);
					} @else {
						grid-template-#{$type}s: unset;
					}

					@include autoFlowGrid($type, $idx);
				}
			}
		}
	}
}
@mixin logicalSpacing($top, $right, $bottom, $left, $types...) { 
	@if (length($types) > 0) {
		@each $type in $types {
			@if ($type != "margin" and $type != "padding") {
				@warn "$type: '#{quote($type)}' is not a valid logical spacing attribute.  Should be 'margin' or 'padding'.";
			} @else {
				@if ($left) { #{$type}-inline-start: $left; }
				@if ($right) { #{$type}-inline-end: $right; }
				@if ($top) { #{$type}-block-start: $top; }
				@if ($bottom) { #{$type}-block-end: $bottom; }
			}			
		}
	} @else {
		@if ($left) { margin-inline-start: $left; }
		@if ($right) { margin-inline-end: $right; }
		@if ($top) { margin-block-start: $top; }
		@if ($bottom) { margin-block-end: $bottom; }
		@if ($left) { padding-inline-start: $left; }
		@if ($right) { padding-inline-end: $right; }
		@if ($top) { padding-block-start: $top; }
		@if ($bottom) { padding-block-end: $bottom; }
	}
}
@mixin borders($style: solid, $width: 1px, $radius: 0, $color: hsl(43, 0, 0), $sides...) { 
	@if (length($sides) > 0) {
		@each $side in $sides {
			@if ($side != "top" and $side != "right" and $side != "bottom" and $side != "left") {
				@warn "$side: '#{quote($side)}' is not a valid border side.  Should be 'top', 'right', 'bottom' or 'left'.";
			} @else {
				border-#{$side}-style: $style;
				border-#{$side}-width: $width;
				border-#{$side}-radius: $radius;
				border-#{$side}-color: $color;
			}			
		}		
	} @else {
		border-style: $style;
		border-width: $width;
		border-radius: $radius;
		border-color: $color;
	}
}
@mixin border($style: solid, $width: 0, $color: transparent, $sides...) {	
	@if (length($sides) > 0) {
		@each $side in $sides {
			@if ($side != "top" and $side != "right" and $side != "bottom" and $side != "left") {
				@warn "$side: '#{quote($side)}' is not a valid border side.  Should be 'top', 'right', 'bottom' or 'left'.";
			} @else {
				@if ($style == none) {
					border-#{$side}-style: $style;
				} @else {
					border-#{$side}-style: $style;
					border-#{$side}-width: $width;
					border-#{$side}-color: $color;	
				}
			}			
		}		
	} @else {
		@if ($style == none) {
			border-style: $style;
		} @else {
			border-style: $style;
			border-width: $width;
			border-color: $color;	
		}
	}
}
@mixin border-radius($radiuses...) { 
	@if (length($radiuses) > 1) {	
		@if (length($radiuses) > 4) {
			@warn "$radiuses: '#{quote($radiuses)}' is not a valid list or border radiuses.  Should be a maximum of 4: top-left, top-right, bottom-right and bottom-left.";
		} @else {	
			@for $i from 1 through length($radiuses) {
				$radius: nth($radiuses, $i);
				@if ($i == 1) { 
					border-top-left-radius: #{$radius}; 					
				}
				@if ($i == 2) { 
					border-top-right-radius: #{$radius}; 
				}
				@if ($i == 3) { 
					border-bottom-right-radius: #{$radius}; 
				}
				@if ($i == 4) { 
					border-bottom-left-radius: #{$radius}; 
				}
			}
		}
	} @else {
		border-radius: $radiuses;
	}
}
@mixin outline($style: solid, $width: 1px, $offset: 0, $color: hsl(43, 0, 0)) { 
	outline-style: $style;
	outline-width: $width;
	outline-offset: $offset;
	outline-color: $color;
}